---
import LogoImg from "../assets/logo.png";
import Hamburger from "./Hamburger.astro";

const links = [
  {
    name: "About",
    subsections: [
      {
        name: "Sakhya History",
        link: "",
      },
      {
        name: "Our Team",
        link: "",
      },
      {
        name: "Trustees",
        link: "",
      },
      {
        name: "Partners",
        link: "",
      },
    ],
  },
  {
    name: "Resources",
    subsections: [
      {
        name: "Brochures",
        link: "",
      },
      {
        name: "Annual Report",
        link: "",
      },
      {
        name: "Hunkar",
        link: "",
      },
      {
        name: "Blogs",
        link: "",
      },
      {
        name: "Publications",
        link: "",
      },
      {
        name: "Media coverage",
        link: "",
      },
    ],
  },
  {
    name: "Our Work",
    subsections: [
      {
        name: "Sakhya History",
        link: "",
      },
      {
        name: "Our Team",
        link: "",
      },
      {
        name: "Trustees",
        link: "",
      },
      {
        name: "Partners",
        link: "",
      },
    ],
  },
  {
    name: "Gallery",
    subsections: [
      {
        name: "Photos",
        link: "",
      },
      {
        name: "Videos",
        link: "",
      },
    ],
  },
  {
    name: "Join us",
    subsections: [
      {
        name: "Student internship",
        link: "",
      },
      {
        name: "Donation form",
        link: "",
      },
      {
        name: "Volunteer form",
        link: "",
      },
    ],
  },
];
const isPopup = false;
---
<div class="relative">
  <header
    class="transition-all duration-300 flex items-center py-1 bg-col-1-light fixed top-0 left-0 right-0 opacity-100 z-50"
  >
    <nav class="flex items-center justify-between w-[95vw] m-auto">
      <a class="block" href="/">
        <span class="sr-only">Home</span>
        <img src={LogoImg.src} class="h-12" alt="Sakhya Logo" />
      </a>
      <div class="md:flex md:items-center md:gap-8">
        <nav aria-label="Global" class="hidden md:block" id="menu">
          <ul class="flex flex-col md:flex-row items-center gap-2">
            {
              links.map((link) => (
                <li>
                  <details class="group [&_summary::-webkit-details-marker]:hidden">
                    <summary class="flex cursor-pointer border-none items-center justify-between rounded-lg py-1 px-3 text-slate-700 hover:text-col-3">
                      <span class="font-medium text-sm lg:text-base">
                        {link.name}
                      </span>
                      <span class="shrink-0 transition duration-300 group-open:-rotate-180">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="h-5 w-5"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      </span>
                    </summary>
                    <ul class="mt-2 flex flex-col md:absolute bg-col-1 rounded-md">
                      {link.subsections.map((subsection) => (
                        <li>
                          <a
                            href={subsection.link}
                            class="block rounded-md px-4 py-2 w-44 text-sm font-medium text-gray-700 hover:text-col-3"
                          >
                            {subsection.name}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </details>
                </li>
              ))
            }
          </ul>
        </nav>

        <div class="flex items-center gap-4">
          <div class="sm:flex sm:gap-4">
            <a
              class="rounded-md bg-teal-600 px-5 py-2.5 text-sm font-medium text-white shadow"
              href="#"
            >
              Donate
            </a>
          </div>
          <div class="block md:hidden">
            <label
              for="menu-toggle"
              class="rounded p-2 text-gray-600 transition hover:text-gray-600/75 cursor-pointer lg:hidden block"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
            </label>
            <input class="hidden" type="checkbox" id="menu-toggle" />
          </div>
        </div>
      </div>
      <!-- <ul class='md:hidden flex items-center'>
        <li>
          <button type='button' class='flex items-center justify-center transition-all duration-200 active:scale-90 cursor-pointer relative pr-4 interactable' onClick={onTriggerPopup}  datatype={`${popupState ? 'open' : 'close'}`}>
            <GiHamburgerMenu class={`absolute transition-all text-2xl text-slate-50 duration-100 ${popupState ? 'opacity-0 rotate-45': 'opacity-100 rotate-0'}`}/>
            <IoClose class={`absolute transition-all text-2xl scale-110 text-slate-50 duration-100  ${popupState ? 'opacity-100 rotate-0' : 'opacity-0 -rotate-45'}`}/>
          </button>
        </li>
        <li>
        </li>
      </ul> -->
    </nav>
  </header>
  <Hamburger popupState={isPopup} links={links} />
</div>

<script>
  // Fetch all the details element.
  const details = document.querySelectorAll("details");

  // Add the onclick listeners.
  details.forEach((detail) => {
    detail.addEventListener("toggle", () => {
      if (detail.open) setTargetDetail(detail);
    });
  });

  // Close all the details that are not targetDetail.
  function setTargetDetail(targetDetail: HTMLDetailsElement) {
    details.forEach((detail) => {
      if (detail !== targetDetail) {
        detail.open = false;
      }
    });
  }
</script>

<script>
  // const menuToggle = document.getElementById("menu-toggle");
  // const hamburgerMenu = document.getElementById("hamburger");
  // console.log(menuToggle?.checked);
  // if(hamburgerMenu && menuToggle) {
  //   hamburgerMenu.style.left = menuToggle.checked ? "0" : "-100%";
  // }
</script>
